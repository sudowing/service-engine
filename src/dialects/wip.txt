export const toProtoScalar = (type: string) => {
  switch (type) {
    // 8.1. Numeric Types":
    case "smallint":
    case "integer":
      return "uint32";
    case "bigint":
    case "decimal":
    case "numeric":
    case "real":
    case "double precision":
      return "string"; // String because of arbitrary precision that cannot be jsonifieds
    case "smallserial":
    case "serial":
      return "uint32";
    case "bigserial":
      return "uint64";
    case "int2":
    case "int4":
    case "int8":
      return "sint32";
    // 8.2. Monetary Types":
    case "money": // bigint in js
      return "string"; // string as it is arbitrary length
    // 8.3. Character Types":
    // case "character varying(n)": // ignore. default will be string
    // case "varchar(n)": // ignore. default will be string
    // case "character(n)": // ignore. default will be string
    // case "char(n)": // ignore. default will be string
    case "character varying":
    case "text":
    case '"char"':
    case "name":
      return "string";
    // 8.4. Binary Data Types":
    case "bytea":
      return "string";
    // 8.5. Date/Time Types":
    // case "timestamp": tz optional // ignore. default will be string
    // case "timestamp": wtz // ignore. default will be string
    case "timestamp without time zone":
    case "date":
    // case "time": tz optional // ignore. default will be string
    // case "time": wtz // ignore. default will be string
    case "interval":
      return "string";
    // 8.6. Boolean Type":
    case "boolean":
      return "bool";
    // 8.7. Enumerated Types":
    // ignore. default will be string
    // 8.8. Geometric Types":
    case "point":
    case "geometry(Point)":
    case "line":
    case "geometry(Line)":
    case "geometry(MultiLineString)":
    case "lseg":
    case "geometry(Lseg)":
    case "box":
    case "geometry(Box)":
    case "path":
    case "geometry(Path)":
    case "polygon":
    case "geometry":
    case "geometry(Polygon)":
    case "geometry(MultiPolygon)":
    case "circle":
    case "geometry(Circle)":
      return "string"; // will want geoJson on output
    // 8.9. Network Address Types":
    case "cidr":
    case "inet":
    case "macaddr":
      return "string";
    // 8.10. Bit String Types":
    // case "bit(n)": // ignore. default will be string
    // case "bit varying(n)": // ignore. default will be string
    //    return 'String';

    // 8.11. Text Search Types":
    // 8.11.1. tsvector":
    // 8.11.2. tsquery":

    // 8.12. UUID Type":
    case "uuid":
      return "string";
    // 8.13. XML Type":
    case "xml":
      return "string";
    // 8.14. JSON Types":
    case "json":
    case "jsonb":
    case "jsonpath":
      return "string"; // will want to use JSONB on output

    // 8.15. Arrays":
    // ignore. default will be string
    // in the future -- breaking change will type

    // 8.16. Composite Types":
    // ignore. default will be string

    // 8.17. Range Types":
    case "int4range":
    case "int8range":
      return "string";
    case "numrange":
    case "* float":
      return "double";
    case "tsrange":
    case "tstzrange":
    case "daterange":
      return "string";
    // 8.18. Domain Types": // ignore. let default catch it
    // 8.19. Object Identifier Types":
    case "oid":
      return "uint32";
    case "regproc":
    case "regprocedure":
    case "regoper":
    case "regoperator":
    case "regclass":
    case "regtype":
    case "regrole":
    case "regnamespace":
    case "regconfig":
    case "regdictionary":
      return "string";
    // 8.20. pg_lsn Type":
    case "pg_lsn":
      return "string";
    default:
      if (hasGeoPrefix(type)) return "string"; // will want geoJson on output
      return "string";
  }
};